{
  "hash": "b805c04b2729a9d23f3028a9f7ddba48",
  "result": {
    "markdown": "---\ntitle: Tick formatting recipes\ndate: '2022-09-21'\nformat: html\ncategories:\n  - matplotlib\n---\n\n[mpl gallery about ticks](https://matplotlib.org/stable/gallery/ticks/index.html)  \n[mpl ticker API](https://matplotlib.org/stable/api/ticker_api.html)\n\n## Default tick formatter \n\n```python\nfrom matplotlib.ticker import ScalarFormatter\nax.xaxis.set_major_formatter(ScalarFormatter()) \n```\n\n## Format string as usually \n\n```python\nfrom matplotlib.ticker import StrMethodFormatter\nax.xaxis.set_major_formatter(StrMethodFormatter('{x:.1f}')) \n```\n\n## Ticks in a scientific/engineering notation \n\n```python\nfrom matplotlib.ticker import EngFormatter\nax.xaxis.set_major_formatter(EngFormatter(sep='')) # no unit, no distance to the multiplier \nax.xaxis.set_major_formatter(EngFormatter(unit='Hz')) \n```\n[src](https://matplotlib.org/stable/gallery/text_labels_and_annotations/engineering_formatter.html)\n\n\n## Percent formatter that does the scaling too \n\n```python\nfrom matplotlib.ticker import PercentFormatter\nvalue_100perc = 2.5 # data value corresponding to the 100%\nax.xaxis.set_major_formatter(PercentFormatter(xmax=value_100perc))  \n```\n\n## Lambda formatter (func formatter)\n\nOption 1: \n\n```python\nfrom matplotlib import ticker \n\n@ticker.FuncFormatter\ndef custom_formatter(x, pos):\n    return f'[{x:.2f}]'\n\nax.xaxis.set_major_formatter(custom_formatter)\n\n```\n\nOption 2: \n```python\nfrom matplotlib.ticker import FuncFormatter \n\ncustom_formatter = lambda x, pos: f'[{x:.2f}]'\nax.xaxis.set_major_formatter(FuncFormatter(custom_formatter))\n\n```\n\n[src](https://matplotlib.org/stable/gallery/ticks/tick-formatters.html#)\n\n\n## Space as a separator between thousands \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt \n\ny = [0, 1e4, 2.3e4, 3.12e4]\nx = [2000, 2010, 2020, 2030]\n```\n:::\n\n\nUse the `FuncFormatter`, which requires a function of a form: \n```python\ndef my_func(x,pos): \n    # blablabla \n    return formatted_x_string\n```\n\nNow implement the formatter. We want every 3 digits separated by a space, and our labels to be integers (won't work for floats). We will use `format()`, which accepts parameter `,d` producing comma-separated notation, and replace the commas with spaces. \n\nThe formatter can be applied to each axis separately. \n\n```python\nfrom matplotlib.ticker import FuncFormatter\nformat_spaces = lambda x, pos: format(int(round(x)), ',d').replace(',',' ')\nax.yaxis.set_major_formatter(FuncFormatter(format_spaces))\n```\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nf, ax = plt.subplots()\nax.plot(x,y,marker='o')\n\nfrom matplotlib.ticker import FuncFormatter\nformat_spaces = lambda x, pos: format(int(round(x)), ',d').replace(',',' ')\nax.yaxis.set_major_formatter(FuncFormatter(format_spaces))\n```\n\n::: {.cell-output .cell-output-display}\n![](tick_formatting_files/figure-html/cell-3-output-1.png){width=596 height=404}\n:::\n:::\n\n\n",
    "supporting": [
      "tick_formatting_files"
    ],
    "filters": [],
    "includes": {}
  }
}